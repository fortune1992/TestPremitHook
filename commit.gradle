import java.security.MessageDigest

ext {

    getChangedFiles = {
        if (isReleaseBuildType()) {
            return getRecentlyCommitChangedFiles()
        } else {
            return getLocalChangedFiles()
        }
    }

    getLocalChangedFiles = {
        try {
            String changeInfo = 'git status -s'.execute([], project.rootDir).text.trim()
            return changeInfo == null ? "" : changeInfo
        } catch (Exception ignored) {
            return ""
        }
    }

    getRecentlyCommitChangedFiles = {
        try {
            String changeInfo = 'git diff --name-status HEAD~ HEAD'.execute([]).text.trim()
            return changeInfo == null ? "" : changeInfo
        } catch (Exception ignored) {
            return ""
        }
    }

    filterCommitter = { String gitStatusInfo, String fileSuffix ->
        ArrayList filterList = new ArrayList()
        String[] lines = gitStatusInfo.split("\\n")
        for (String line : lines) {
            if (line.contains(fileSuffix)) {
                String[] spliters = line.trim().split("\\s+")
                if (spliters.length > 0 &&
                        (spliters[0].equalsIgnoreCase("M") ||
                                spliters[0].equalsIgnoreCase("A") ||
                                spliters[0].equalsIgnoreCase("AM"))) {
                    for (String str : spliters) {
                        if (str.contains(fileSuffix)) {
                            filterList.add(str)
                        }
                    }
                }
            }
        }
        return filterList
    }

    hasCheckCommitParam = {
        return project.hasProperty('checkCommit') && project.property("checkCommit")
    }

    generateMD5 = { String path ->
        MessageDigest digest = MessageDigest.getInstance("MD5")
        FileInputStream fis = new FileInputStream(path)
        ByteArrayOutputStream bos = new ByteArrayOutputStream()
        byte[] b = new byte[1024]
        int n
        while ((n = fis.read(b)) != -1) {
            bos.write(b, 0, n)
        }
        fis.close()
        bos.close()
        digest.update(bos.toByteArray())
        return new BigInteger(1, digest.digest()).toString(16).padLeft(32, '0')
    }

    isSameFile = { File file1, File file2 ->
        String file1Md5 = generateMD5(file1.getAbsolutePath())
        String file2Md5 = generateMD5(file2.getAbsolutePath())
        return file1Md5 == file2Md5
    }

    isReleaseBuildType = {
        for (String s : gradle.startParameter.taskNames) {
            if (s.toLowerCase().contains("release")) {
                return true
            }
        }
        return false
    }
}

task installGitHooks(type: Copy) {
    from new File(rootProject.rootDir, 'gitHook/commit-msg')
    from new File(rootProject.rootDir, 'gitHook/pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0755
}

installGitHooks.onlyIf {
    File targetCommitMsgFile = new File(rootProject.rootDir, '.git/hooks/commit-msg')
    File sourceCommitMsgFile = new File(rootProject.rootDir, 'gitHook/commit-msg')

    File targetPreCommitFile = new File(rootProject.rootDir, '.git/hooks/pre-commit')
    File sourcePreCommitFile = new File(rootProject.rootDir, 'gitHook/pre-commit')

    !targetCommitMsgFile.exists() ||
            !targetPreCommitFile.exists() ||
            !isSameFile(sourceCommitMsgFile, targetCommitMsgFile) ||
            !isSameFile(sourcePreCommitFile, targetPreCommitFile)
}

afterEvaluate {
    def prebuild = tasks.findByName("preBuild")
    if (prebuild != null && !isReleaseBuildType) {
        prebuild.dependsOn(installGitHooks)
    }
}