apply plugin: 'checkstyle'
apply from: rootProject.file("commit.gradle")
apply from: rootProject.file("detekt.gradle")

configurations {
    checkstyle
}

checkstyle {
    configFile new File(rootProject.rootDir, 'config/checkstyle/checkstyle.xml')
    configProperties.checkstyleSuppressionFilterPath = new File(
            "${project.rootDir}/config/checkstyle/checkstyle-suppression.xml")
            .absolutePath
    toolVersion '8.13'
    ignoreFailures false
    showViolations true
}

task checkstyle(type: Checkstyle) {
    description = "Java static code analysis."
    classpath = configurations.checkstyle
    source  'src'
    exclude '**/gen/**'
    exclude '**/test/**'
    exclude '**/build/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
    if (hasCheckCommitParam() || isReleaseBuildType()) {
        def filterFileNameList = findChangedFiles(getChangedFiles(), ".java")
        def includeList = new ArrayList()
        for (int i = 0; i < filterFileNameList.size(); i++) {
            String spliter = filterFileNameList[i]
            String[] spliterList = spliter.split("/")
            String fileName = spliterList[spliterList.length - 1]
            includeList.add("**/" + fileName)
        }
        if (includeList.size() == 0) {
            exclude '**/*.java'
        } else {
            include includeList
        }
    } else {
        include '**/*.java'
    }
    classpath = files()
}

/**
 * gradle 生命周期
 * 1、初始化阶段
 * 2、配置阶段
 * 3、执行阶段
 *
 * afterEvaluate： Project配置结束后调用
 */
afterEvaluate {
    def prebuild = tasks.findByName("preBuild")
    if (prebuild != null) {
        if (isReleaseBuildType()) {
            // Release 注册deteKt, checkStyle
            prebuild.dependsOn("detekt", "checkstyle")
        } else {
            // DEBUG 注册gitHooks
            if (project.name.equalsIgnoreCase("app")) {
                prebuild.dependsOn("installGitHooks")
            }
        }
    }
}



